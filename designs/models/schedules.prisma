datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Referenced models from other schemas
model Medication {
  id              Int       @id @default(autoincrement())
  medicationName  String    @map("medication_name")
  schedules       MedicationSchedule[]
  tracker         MedicationTracker?

  @@map("medications")
}

// Schedules module models
model MedicationSchedule {
  id                    Int       @id @default(autoincrement())
  medicationId          Int       @map("medication_id")
  patientId             Int       @map("patient_id")
  doseTime              DateTime  @map("dose_time")
  processedAt          DateTime? @map("processed_at")
  status               String    @default("Pending")
  takenAt              DateTime? @map("taken_at")
  secondNotificationSent Boolean  @default(false) @map("second_notification_sent")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  
  // Relations
  medication           Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  notifications        MedicationScheduleNotification[]
  snoozes             MedicationSnooze[]

  @@map("medication_schedules")
}

model MedicationScheduleNotification {
  id                    Int               @id @default(autoincrement())
  medicationScheduleId  Int               @map("medication_schedule_id")
  message               String
  status                String            @default("Pending")
  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
  
  // Relations
  schedule              MedicationSchedule @relation(fields: [medicationScheduleId], references: [id], onDelete: Cascade)

  @@map("medication_schedules_notifications")
}

model MedicationSnooze {
  id                    Int               @id @default(autoincrement())
  medicationScheduleId  Int               @map("medication_schedule_id")
  snoozeTime           DateTime          @map("snooze_time")
  status               String            @default("Pending")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  
  // Relations
  medicationSchedule    MedicationSchedule @relation(fields: [medicationScheduleId], references: [id], onDelete: Cascade)

  @@map("medication_snoozes")
}

model MedicationTracker {
  id              Int       @id @default(autoincrement())
  medicationId    Int       @unique @map("medication_id")
  startDate       DateTime? @map("start_date")
  endDate         DateTime? @map("end_date")
  nextStartMonth  DateTime? @map("next_start_month")
  stopDate        DateTime? @map("stop_date")
  duration        String?
  frequency       String?
  schedules       String?
  timezone        String    @default("Africa/Nairobi")
  active          Boolean   @default(true)
  status          String    @default("Running")
  stoppedWhen     DateTime? @map("stopped_when")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relations
  medication      Medication @relation(fields: [medicationId], references: [id], onDelete: Cascade)

  @@map("medication_tracker")
}
